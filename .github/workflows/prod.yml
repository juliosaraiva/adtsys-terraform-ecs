name: Terraform

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TERRAFORM_VERSION: 0.15.0
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform_check:
    name: Check for production
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      TF_VAR_db_username: ${{ secrets.TF_VAR_db_username }}
      TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
    environment:
      name: production
    steps:
    - uses: actions/checkout@v2.1.0
    - uses: hashicorp/setup-terraform@v1
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true
    - name: Select production Workspace
      run: terraform workspace select production
      continue-on-error: true
    - id: check_workspace
      run: terraform workspace show
    - id: output_workspace
      run: echo ::set-output name=key::${{ steps.check_workspace.outputs['stdout'] }}
    - name: Create production workspace
      run: terraform workspace new production
      if: ${{ steps.output_workspace.outputs.key != 'production' }}
    - name: Terraform plan
      id: plan
      run: terraform plan -no-color
    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
  terraform_deploy:
    if: github.event_name == 'workflow_dispatch'
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: production
    steps:
    - uses: actions/checkout@v2.1.0
    - uses: hashicorp/setup-terraform@v1
    - name: Terraform Apply
      run: terraform apply -auto-approve
  terraform_destroy:
    if: github.event_name == 'workflow_dispatch'
    name: Terraform Destroy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: production
    steps:
    - uses: actions/checkout@v2.1.0
    - uses: hashicorp/setup-terraform@v1
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      
    

